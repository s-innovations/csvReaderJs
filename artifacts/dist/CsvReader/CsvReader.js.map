{
  "version": 3,
  "file": "CsvReader/CsvReader.js",
  "sources": [
    "KnockoutUtils.js",
    "CsvReader.js",
    "CsvReaderDelimiterType.js",
    "CsvReaderDelimiter.js",
    "CsvReaderColumn.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA,ADWA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA,ADYA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA,AD0BA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "define('CsvReader/KnockoutUtils',[\"require\", \"exports\", \"knockout\"], function (require, exports, ko) {\r\n    function GetObservable(value) {\r\n        return (typeof (value) === \"function\" ? value : ko.observable(value));\r\n    }\r\n    exports.GetObservable = GetObservable;\r\n    function GetObservableArray(value) {\r\n        return (typeof (value) === \"function\" ? value : ko.observableArray(value));\r\n    }\r\n    exports.GetObservableArray = GetObservableArray;\r\n});\r\n//# sourceMappingURL=KnockoutUtils.js.map;\n",
    "define('CsvReader/CsvReader',[\"require\", \"exports\", \"knockout\", \"./KnockoutUtils\"], function (require, exports, ko, KnockoutUtil) {\r\n    var CsvReader = (function () {\r\n        function CsvReader(options) {\r\n            var _this = this;\r\n            this.options = options;\r\n            this.columnHeaders = ko.computed(function () {\r\n                var columns = _this.columns();\r\n                var headers = [];\r\n                ko.ignoreDependencies(function () {\r\n                    var sortedColumns = _this.columns().sort(function (a, b) { return a.column() > b.column() ? 1 : -1; });\r\n                    for (var i = 0; i < sortedColumns.length; ++i) {\r\n                        if (i < sortedColumns[i].column()) {\r\n                            headers.push(\"\");\r\n                            continue;\r\n                        }\r\n                        var j = i;\r\n                        while (sortedColumns[i].column() === sortedColumns[j + 1].column()) {\r\n                            j++;\r\n                        }\r\n                        headers.push(ko.unwrap(sortedColumns[j].label));\r\n                    }\r\n                });\r\n                return headers;\r\n            });\r\n            this.importAtRow = KnockoutUtil.GetObservable(options.importAtRow);\r\n            this.columns = KnockoutUtil.GetObservableArray(options.columns);\r\n        }\r\n        return CsvReader;\r\n    })();\r\n    return CsvReader;\r\n});\r\n//# sourceMappingURL=CsvReader.js.map;\n",
    "define('CsvReader/CsvReaderDelimiterType',[\"require\", \"exports\"], function (require, exports) {\r\n    var CsvReaderDelimiter;\r\n    (function (CsvReaderDelimiter) {\r\n        CsvReaderDelimiter[CsvReaderDelimiter[\"Tab\"] = 0] = \"Tab\";\r\n        CsvReaderDelimiter[CsvReaderDelimiter[\"Semicolon\"] = 1] = \"Semicolon\";\r\n        CsvReaderDelimiter[CsvReaderDelimiter[\"Comma\"] = 2] = \"Comma\";\r\n        CsvReaderDelimiter[CsvReaderDelimiter[\"Space\"] = 3] = \"Space\";\r\n        CsvReaderDelimiter[CsvReaderDelimiter[\"Other\"] = 4] = \"Other\";\r\n    })(CsvReaderDelimiter || (CsvReaderDelimiter = {}));\r\n    return CsvReaderDelimiter;\r\n});\r\n//# sourceMappingURL=CsvReaderDelimiterType.js.map;\n",
    "define('CsvReader/CsvReaderDelimiter',[\"require\", \"exports\", \"knockout\", \"./KnockoutUtils\", \"./CsvReaderDelimiterType\"], function (require, exports, ko, KnockoutUtil, CsvReaderDelimiterType) {\r\n    var CsvReaderDelimiter = (function () {\r\n        function CsvReaderDelimiter(options) {\r\n            var _this = this;\r\n            if (options === void 0) { options = { type: CsvReaderDelimiterType.Tab }; }\r\n            this.type = KnockoutUtil.GetObservable(options.type);\r\n            this.value = ko.computed(function () {\r\n                switch (_this.type()) {\r\n                    case CsvReaderDelimiterType.Comma:\r\n                        return ',';\r\n                    case CsvReaderDelimiterType.Semicolon:\r\n                        return ':';\r\n                    case CsvReaderDelimiterType.Space:\r\n                        return ' ';\r\n                    case CsvReaderDelimiterType.Tab:\r\n                        return '\\t';\r\n                    case CsvReaderDelimiterType.Other:\r\n                        return _this.seperator();\r\n                }\r\n            });\r\n        }\r\n        return CsvReaderDelimiter;\r\n    })();\r\n    return CsvReaderDelimiter;\r\n});\r\n//# sourceMappingURL=CsvReaderDelimiter.js.map;\n",
    "define('CsvReader/CsvReaderColumn',[\"require\", \"exports\", \"./KnockoutUtils\"], function (require, exports, KnockoutUtil) {\r\n    var CsvReaderColumn = (function () {\r\n        function CsvReaderColumn(label, column) {\r\n            this.label = label;\r\n            this.column = KnockoutUtil.GetObservable(column);\r\n        }\r\n        return CsvReaderColumn;\r\n    })();\r\n    return CsvReaderColumn;\r\n});\r\n//# sourceMappingURL=CsvReaderColumn.js.map;\n"
  ]
}